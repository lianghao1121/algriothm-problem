/*开放地址法*/
#include<iostream>
#include<string>
#include<algorithm>
int H(int key) {
	return key % 13;
}
int Linedetect(int HT[], int H0, int key, int& cnt) {  /*线路检测*/
	int Hi;
	for (int i = 1; i < m; ++i) {
		cnt++;
		Hi = (H0 + i) % m; //按照线性探测法计算下一个哈希地址Hi
		if (HT[Hi] == NULLKEY)
			return Hi;		//若单元hi为控，则所查找元素不存在
		else if (HT[Hi] == key)		//若单元hi中元素的关键字为key
			return Hi;
	}
	return -1;
}
int SearchHash(int HT[], int key) {		//所需存贮的HT，以及关键字key
	//在哈希表HT中查找key，若查找成功，则返回下标，否则返回-1
	int H0 = H(key); //根据哈希函数计算哈希地址
	int Hi,cnt = 1;
	if (HT[H0] == NULLKEY)  //若单元H0为控，则所查元素不存在
		return -1;
	else if (HT[H0] == key) { //若单元H0中元素的关键字为key，则查找成功
		std::cout << "查找成功，比较次数：" << cnt << std::endl;
		return H0;


	}
	else {
		Hi = Linedetect(HT, H0, key, cnt);
		if (HT[Hi] == key) {		//若单元Hi中元素的关键字为key，则查找成功
			std::cout << "查找成功，比较次数" << cnt << std::endl;
			return Hi;
		}
		else
			return -1;
	}
}
bool InsertHash(int HT[], int key) {
	int H0 = H(key);
	int Hi = -1, cnt = 1;
	if (HT[H0] == NULLKEY) {
		HC[H0] = 1;//比较统计次数
		HT[H0] = key;//若单元H0为空，则放入
		return 1;
	}
	else {
		Hi = Linedetect(HT, H0, key, cnt);//线性探测
		if (Hi = -2&& (HT[Hi] == NULLKEY)){
			HC[Hi]=cnt;
				HT[Hi]=key; //若单元Hi为空，则放入
				return -1;
		};
	}
	return 0;
}
